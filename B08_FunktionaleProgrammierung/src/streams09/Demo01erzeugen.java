package streams09;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Random;
import java.util.function.Supplier;
import java.util.function.UnaryOperator;
import java.util.stream.Stream;

public class Demo01erzeugen {

	public static void main(String[] args) throws IOException {
		Stream<Integer> myStream;

		/**
		 * mit Utility Klassen
		 */
//		myStream = with_Utils_Arrays_stream();
//		myStream = with_Utils_Collection_stream();
		
		/**
		 * mit der Stream Klasse/Interface
		 */
//		myStream = with_Stream_generate_Critical();
//		myStream = with_Stream_iterate_Critical();
		
//		spass_Mit_Stream();
		
//		myStream = Stream.empty();
		
//		myStream = Stream.of(5, 7, 84, 54, 48, 48, 48, 4, 564, 65);
		
		myStream = with_Stream_concat();
		
		/**
		 * Ausgabe des Streams - Terminal Operation
		 */
		System.out.println("Terminal");
		myStream.forEach(System.out::println);
	}

	private static Stream<Integer> with_Stream_concat() {
		Stream<Integer> stream01 = Stream.of(1,2,3,4);
		Stream<Integer> stream02 = Stream.of(9,8,7,6,5);
		return Stream.concat(stream01, stream02);
	}

	private static void spass_Mit_Stream() {
		UnaryOperator<Integer> toRead = i-> {
			try {
				return System.in.read();
			} catch (IOException e) {
				e.printStackTrace();
				return 42;
			}
		};
		Supplier<Integer> supplier = () -> {
			try {
				return System.in.read();
			} catch (IOException e) {
				e.printStackTrace();
				return 127;
			}
		};
//		Stream.iterate(65, toRead).forEach((i) -> System.out.print((char)i.intValue()));
		
		//Consumer<>
		
		Stream.generate(supplier).map(i->(char)i.intValue()).forEach((t) -> System.out.print(t));
	}

	/**
	 * @Stream.iterate Returns an infinite sequential ordered Stream produced by
	 *                 iterative application of a function f to an initial element
	 *                 seed, producing a Stream consisting of seed, f(seed),
	 *                 f(f(seed)), etc.
	 */
	private static Stream<Integer> with_Stream_iterate_Critical() {
		int seed = 2_147_000_000;
		UnaryOperator<Integer> operator = i-> i+1;
		return Stream.iterate(seed, operator);
	}

	/**
	 * @Stream.generate Returns an infinite sequential unordered stream where each
	 *                  element is generated by the provided Supplier.
	 * 
	 *                  This is suitable for generating constant streams, streams of
	 *                  random elements, etc.
	 * 
	 */
	private static Stream<Integer> with_Stream_generate_Critical() {
		Random rand = new Random();
		Supplier<Integer> supplier = ()-> Math.abs(rand.nextInt());
		return	Stream.generate(supplier);
	}

	private static Stream<Integer> with_Utils_Collection_stream() {
		List<Integer> myColl = new ArrayList<>();
		Random rand = new Random();
		for (int i = 0; i < 25; i++) {
			myColl.add(rand.nextInt());
		}
		return myColl.stream();
	}

	private static Stream<Integer> with_Utils_Arrays_stream() {
		String[] texte = {"a","b","c","d"};
		
		Stream<String> myStream = Arrays.stream(texte);
		
		Integer[] zahlen = { 2, 3, 4, 5, 6, 7, 8, 9, 7, 8, 5, 4, 54, 5, 7, 84, 54, 48, 48,
				48, 4, 564, 65 };
		
		return Arrays.stream(zahlen);
	}
}
